// Generated by CoffeeScript 1.11.1
(function() {
  var Jimp, Promise, sh2png;

  Promise = require("bluebird");

  Jimp = require("@codelenny/jimp");

  sh2png = (function() {

    /*
    Returns the required height and width of the image.
    @param {String} str the console output that will be formatted
    @param {Object} opts the user-supplied options.  See {sh2png.format}
    @return {Promise<Array<Number>>} the needed [height, width] of the image, in pixels.
    @private
     */
    function sh2png() {}

    sh2png.getImageDimensions = function(str, opts) {
      var load;
      load = Promise.promisify(require("@codelenny/load-bmfont"));
      return load(opts.font).then(function(font) {
        var char, charWidth, height, j, len, m, ref, width;
        height = str.split("\n").length * font.common.lineHeight;
        m = null;
        ref = font.chars;
        for (j = 0, len = ref.length; j < len; j++) {
          char = ref[j];
          if (!(char.id === 115)) {
            continue;
          }
          m = char;
          break;
        }
        charWidth = Math.max(m.xadvance, m.width + m.xoffset);
        width = (opts.width * charWidth) + 1;
        return [height, width];
      });
    };


    /*
    Create an empty JIMP Image to write the console output into.
    @param {String} str the console output that will be formatted
    @param {Object} opts the user-supplied options.  See {sh2png.format}
    @return {Promise<Image>} a JIMP image, promisified
    @private
     */

    sh2png.createCanvas = function(str, opts) {
      return this.getImageDimensions(str, opts).then(function(arg) {
        var height, width;
        height = arg[0], width = arg[1];
        return new Promise(function(resolve, reject) {
          return new Jimp(width, height, opts.colors.background, function(err, image) {
            if (err) {
              reject(err);
            }
            return resolve(Promise.promisifyAll(image));
          });
        });
      });
    };


    /*
    Split the given console output into functions that can draw each formatted section of the output on an image.
    @param {String} str the console output that will be formatted
    @param {Object} opts the user-supplied options.  See {sh2png.format}
    @return {Promise<Array<Function>>} An array of functions, each drawing a section of the console output on an image.
      Functions take `font`, `image`, and `opts`, and return a Promise.
    @private
     */

    sh2png.splitString = function(str, opts) {
      var all, br, char, code1, code2, color, colorCode, escape, line, ref, sequence;
      colorCode = /\\(e|033|x1b)\[([0-9]+);?([0-9]+)?m/;
      color = this.parseColor(null, '39', null, opts);
      line = 0;
      char = 0;
      all = [];
      while (str.length > 0) {
        br = str.indexOf("\n");
        escape = str.search(colorCode);
        if (escape === -1 && br === -1) {
          all.push(this.drawString(str, color, line, char));
          break;
        }
        if (br > -1 && (escape === -1 || br < escape)) {
          all.push(this.drawString(str.substr(0, br), color, line, char));
          char = 0;
          line = line + 1;
          str = str.substr(br + 1);
          continue;
        }
        all.push(this.drawString(str.substr(0, escape), color, line, char));
        char += escape;
        ref = str.match(colorCode), sequence = ref[0], code1 = ref[1], code2 = ref[2];
        color = this.parseColor(color, code1, code2, opts);
        str = str.substr(escape + sequence.length);
      }
      return Promise.resolve(all);
    };


    /*
    Return a draw function that takes `font`, `image`, `opts`, and draw the specified string with the given color, line,
    and character onto the image with the given font.
    @param {String} str the text to print
    @param {Object} color the color to use when printing the string
    @param {Number} line the given vertical line to draw the text at
    @param {Number} char the given horizontal column to draw the text at
    @return {Function<Promise>} a function that returns a promise to draw the text with the given details.
    @private
     */

    sh2png.drawString = function(str, color, line, char) {
      return function(font, image, opts) {
        var c;
        if (!font.common.charWidth) {
          font.common.charWidth = font.chars.m.width;
        }
        c = opts.colors[color.bold ? "bold" : "normal"][color.color];
        image.print(font, char * font.common.charWidth, line * font.common.lineHeight, str, {
          color: c
        });
        return Promise.resolve();
      };
    };


    /*
    Determine the color of the output text, given the previous color and an escape code.
    @param {Object} color the previous color
    @param {String} code1 an escape code number (a.k.a. 39 for escape `\e[39m`, default color)
    @param {String} code2 an escape code number (a.k.a. 39 for escape `\e[39m`, default color)
    @param {Object} opts the user-supplied options.  See {sh2png.format}
    @private
     */

    sh2png.parseColor = function(color, code1, code2, opts) {
      var code, color_only, j, len, ref, ref1, ref2, ref3;
      if (color == null) {
        color = {};
      }
      color_only = {
        "39": "default",
        "30": "black",
        "31": "red",
        "32": "green",
        "33": "yellow",
        "34": "blue",
        "35": "magenta",
        "36": "cyan",
        "37": "white"
      };
      ref = [code1, code2];
      for (j = 0, len = ref.length; j < len; j++) {
        code = ref[j];
        if (code) {
          switch (false) {
            case code !== '31':
              color = {
                color: "default",
                bold: false
              };
              break;
            case code !== '1':
              color = {
                color: (ref1 = color.color) != null ? ref1 : "default",
                bold: true
              };
              break;
            case code !== '21':
              color = {
                color: (ref2 = color.color) != null ? ref2 : "default",
                bold: false
              };
              break;
            case !color_only[code]:
              color = {
                color: color_only[code],
                bold: (ref3 = color.bold) != null ? ref3 : false
              };
          }
        }
      }
      return color;
    };


    /*
    Given a string representing console output, convert the text into an image.
    
    @example Write output to file, using JavaScript callbacks
      sh2png = require("sh2png")
      output = "\\e[32mHello!\\e[0m"
      sh2png
        .format(output)
        .then(function(img) {
          img.write(__dirname+"/hello.png", function() {
            console.log(output+" written to hello.png");
          });
        });
    
    @example Get Base64'd output, using Promisified methods and CoffeeScript
      sh2png = require "sh2png"
      output = "\\e[32mHello!\\e[0m"
      sh2png
        .format output
        .then (img) -> img.getBase64Async "image/png"
        .then (base64) ->
          console.log "Base 64'd #{output}: #{base64}"
    
    @param {String} str console output to format.
    @option opts {Number} width the console width to wrap characters at.  Defaults to the longest line in the string.
    @option opts {String} font a path to a BMF font to use when drawing the image.  Defaults to Ubuntu Mono 10pt, included
      in `sh2png`.
    @return {Promise<Image>} a [JIMP](https://github.com/oliver-moran/jimp) image, which supports
      [`image.write(path, cb)`](https://github.com/oliver-moran/jimp#writing-to-files),
      [`image.getBase64(mime, cb)`](https://github.com/oliver-moran/jimp#data-uri), etc.
      Extended to add image.writeAsync, image.getBase64Async.
     */

    sh2png.format = function(str, opts) {
      var base, base1, base10, base11, base12, base13, base14, base15, base16, base17, base18, base2, base3, base4, base5, base6, base7, base8, base9, font, image;
      if (opts == null) {
        opts = {};
      }
      if (opts.font == null) {
        opts.font = __dirname + "/../font/Ubuntu_Mono_16pt.fnt";
      }
      if (opts.width == null) {
        opts.width = Math.max.apply(Math, str.split("\n").map(function(l) {
          return l.length;
        }));
      }
      if (opts.colors == null) {
        opts.colors = {
          normal: {},
          bold: {}
        };
      }
      if ((base = opts.colors.normal)["default"] == null) {
        base["default"] = 0x5C6370;
      }
      if ((base1 = opts.colors.normal).black == null) {
        base1.black = 0x000000;
      }
      if ((base2 = opts.colors.normal).red == null) {
        base2.red = 0xE06C75;
      }
      if ((base3 = opts.colors.normal).green == null) {
        base3.green = 0x98C379;
      }
      if ((base4 = opts.colors.normal).yellow == null) {
        base4.yellow = 0xD19A66;
      }
      if ((base5 = opts.colors.normal).blue == null) {
        base5.blue = 0x61AFEF;
      }
      if ((base6 = opts.colors.normal).magenta == null) {
        base6.magenta = 0xC678DD;
      }
      if ((base7 = opts.colors.normal).cyan == null) {
        base7.cyan = 0x56B6C2;
      }
      if ((base8 = opts.colors.normal).white == null) {
        base8.white = 0xABB2BF;
      }
      if ((base9 = opts.colors.bold)["default"] == null) {
        base9["default"] = 0x5C6370;
      }
      if ((base10 = opts.colors.bold).black == null) {
        base10.black = 0x5C6370;
      }
      if ((base11 = opts.colors.bold).red == null) {
        base11.red = 0xE06C75;
      }
      if ((base12 = opts.colors.bold).green == null) {
        base12.green = 0x98C379;
      }
      if ((base13 = opts.colors.bold).yellow == null) {
        base13.yellow = 0xD19A66;
      }
      if ((base14 = opts.colors.bold).blue == null) {
        base14.blue = 0x61AFEF;
      }
      if ((base15 = opts.colors.bold).magenta == null) {
        base15.magenta = 0xC678DD;
      }
      if ((base16 = opts.colors.bold).cyan == null) {
        base16.cyan = 0x56B6C2;
      }
      if ((base17 = opts.colors.bold).white == null) {
        base17.white = 0xFFFEFE;
      }
      if ((base18 = opts.colors).background == null) {
        base18.background = 0x1E2127;
      }
      font = null;
      image = null;
      return Promise.join(Jimp.loadFont(opts.font), this.createCanvas(str, opts), this.splitString(str, opts)).then(function(arg) {
        var all, f, fn, i, j, len, split;
        f = arg[0], i = arg[1], split = arg[2];
        font = f;
        image = i;
        all = [];
        for (j = 0, len = split.length; j < len; j++) {
          fn = split[j];
          all.push(fn(font, image, opts));
        }
        return Promise.all(all);
      }).then(function() {
        return image;
      });
    };


    /*
    Given a shell command, execute the command, then format into an image using {sh2png.format}.
    
    @example Run Mocha, and write output to file using JavaScript callbacks
      sh2png = require("sh2png")
      sh2png
        .run("mocha")
        .then(function(img) {
          img.write(__dirname+"/output.png", function() {
            console.log("Mocha output written to output.png");
          });
        });
    
    @example Run Mocha, and get Base64'd output using Promisified methods and CoffeeScript
      sh2png = require "sh2png"
      sh2png
        .run "mocha"
        .then (img) -> img.getBase64Async "image/png"
        .then (base64) ->
          console.log "Base64'd Mocha output: #{base64}"
    
    @param {String} cmd the shell command to run
    @param {Object} opts options to configure running the given command and formatting the image.
    @option opts {Number} width the console width to wrap characters at.  Defaults to 80 characters
    @option opts {Object} exec options passed to NodeJS's
      [`exec`](https://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback)
    @option opts {String} font a path to a BMF font to use when drawing the image.  Defaults to Ubuntu Mono 10pt, included
      in `sh2png`.
    @return {Promise<Image>} a [JIMP](https://github.com/oliver-moran/jimp) image, which supports
      [`image.write(path, cb)`](https://github.com/oliver-moran/jimp#writing-to-files),
      [`image.getBase64(mime, cb)`](https://github.com/oliver-moran/jimp#data-uri), etc.
      Extended to add image.writeAsync, image.getBase64Async.
     */

    sh2png.prototype.exec = function(cmd, opts) {
      if (opts == null) {
        opts = {};
      }
    };

    return sh2png;

  })();

  module.exports = sh2png;

}).call(this);
